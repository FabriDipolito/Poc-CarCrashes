export const states = [
  { id: 1, name: 'Alabama' },
  { id: 2, name: 'Alaska' },
  { id: 4, name: 'Arizona' },
  { id: 5, name: 'Arkansas' },
  { id: 6, name: 'California' },
  { id: 8, name: 'Colorado' },
  { id: 9, name: 'Connecticut' },
  { id: 10, name: 'Delaware' },
  { id: 11, name: 'District of Columbia' },
  { id: 12, name: 'Florida' },
  { id: 13, name: 'Georgia' },
  { id: 15, name: 'Hawaii' },
  { id: 16, name: 'Idaho' },
  { id: 17, name: 'Illinois' },
  { id: 18, name: 'Indiana' },
  { id: 19, name: 'Iowa' },
  { id: 20, name: 'Kansas' },
  { id: 21, name: 'Kentucky' },
  { id: 22, name: 'Louisiana' },
  { id: 23, name: 'Maine' },
  { id: 24, name: 'Maryland' },
  { id: 25, name: 'Massachusetts' },
  { id: 26, name: 'Michigan' },
  { id: 27, name: 'Minnesota' },
  { id: 28, name: 'Mississippi' },
  { id: 29, name: 'Missouri' },
  { id: 30, name: 'Montana' },
  { id: 31, name: 'Nebraska' },
  { id: 32, name: 'Nevada' },
  { id: 33, name: 'New Hampshire' },
  { id: 34, name: 'New Jersey' },
  { id: 35, name: 'New Mexico' },
  { id: 36, name: 'New York' },
  { id: 37, name: 'North Carolina' },
  { id: 38, name: 'North Dakota' },
  { id: 39, name: 'Ohio' },
  { id: 40, name: 'Oklahoma' },
  { id: 41, name: 'Oregon' },
  { id: 42, name: 'Pennsylvania' },
  { id: 43, name: 'Puerto Rico' },
  { id: 44, name: 'Rhode Island' },
  { id: 45, name: 'South Carolina' },
  { id: 46, name: 'South Dakota' },
  { id: 47, name: 'Tennessee' },
  { id: 48, name: 'Texas' },
  { id: 49, name: 'Utah' },
  { id: 50, name: 'Vermont' },
  { id: 51, name: 'Virginia' },
  { id: 53, name: 'Washington' },
  { id: 54, name: 'West Virginia' },
  { id: 55, name: 'Wisconsin' },
  { id: 56, name: 'Wyoming' },
];

export const statesFlags = [
  { id: 1, url: '/images/Flags/alabama.webp' },
  { id: 2, url: '/images/Flags/alaska.webp' },
  { id: 4, url: '/images/Flags/arizona.webp' },
  { id: 5, url: '/images/Flags/arkansas.webp' },
  { id: 6, url: '/images/Flags/california.webp' },
  { id: 8, url: '/images/Flags/colorado.webp' },
  { id: 9, url: '/images/Flags/connecticut.webp' },
  { id: 10, url: '/images/Flags/delaware.webp' },
  { id: 11, url: '/images/Flags/district-of-columbia.webp' },
  { id: 12, url: '/images/Flags/florida.webp' },
  { id: 13, url: '/images/Flags/georgia.webp' },
  { id: 15, url: '/images/Flags/hawaii.webp' },
  { id: 16, url: '/images/Flags/idaho.webp' },
  { id: 17, url: '/images/Flags/illinois.webp' },
  { id: 18, url: '/images/Flags/indiana.webp' },
  { id: 19, url: '/images/Flags/iowa.webp' },
  { id: 20, url: '/images/Flags/kansas.webp' },
  { id: 21, url: '/images/Flags/kentucky.webp' },
  { id: 22, url: '/images/Flags/louisiana.webp' },
  { id: 23, url: '/images/Flags/maine.webp' },
  { id: 24, url: '/images/Flags/maryland.webp' },
  { id: 25, url: '/images/Flags/massachusetts.webp' },
  { id: 26, url: '/images/Flags/michigan.webp' },
  { id: 27, url: '/images/Flags/minnesota.webp' },
  { id: 28, url: '/images/Flags/mississippi.webp' },
  { id: 29, url: '/images/Flags/missouri.webp' },
  { id: 30, url: '/images/Flags/montana.webp' },
  { id: 31, url: '/images/Flags/nebraska.webp' },
  { id: 32, url: '/images/Flags/nevada.webp' },
  { id: 33, url: '/images/Flags/new-hampshire.webp' },
  { id: 34, url: '/images/Flags/new-jersey.webp' },
  { id: 35, url: '/images/Flags/new-mexico.webp' },
  { id: 36, url: '/images/Flags/new-york.webp' },
  { id: 37, url: '/images/Flags/north-carolina.webp' },
  { id: 38, url: '/images/Flags/north-dakota.webp' },
  { id: 39, url: '/images/Flags/ohio.webp' },
  { id: 40, url: '/images/Flags/oklahoma.webp' },
  { id: 41, url: '/images/Flags/oregon.webp' },
  { id: 42, url: '/images/Flags/pennsylvania.webp' },
  { id: 43, url: '/images/Flags/puerto-rico.webp' },
  { id: 44, url: '/images/Flags/rhode-island.webp' },
  { id: 45, url: '/images/Flags/south-carolina.webp' },
  { id: 46, url: '/images/Flags/south-dakota.webp' },
  { id: 47, url: '/images/Flags/tennessee.webp' },
  { id: 48, url: '/images/Flags/texas.webp' },
  { id: 49, url: '/images/Flags/utah.webp' },
  { id: 50, url: '/images/Flags/vermont.webp' },
  { id: 51, url: '/images/Flags/virginia.webp' },
  { id: 53, url: '/images/Flags/washington.webp' },
  { id: 54, url: '/images/Flags/west-virginia.webp' },
  { id: 55, url: '/images/Flags/wisconsin.webp' },
  { id: 56, url: '/images/Flags/wyoming.webp' },
];

export const carBrands = [
  { id: 54, name: 'Acura', brandLogoUrl: '/images/Brands/acura.webp' },
  { id: 31, name: 'Alfa Romeo', brandLogoUrl: '/images/Brands/alfa-romeo.webp' },
  { id: 3, name: 'AM General', brandLogoUrl: '/images/Brands/am-general.webp' },
  { id: 1, name: 'American Motors', brandLogoUrl: '/images/Brands/american-motors.webp' },
  { id: 32, name: 'Audi', brandLogoUrl: '/images/Brands/audi.webp' },
  { id: 33, name: 'Austin/Austin Healey', brandLogoUrl: '/images/Brands/austin---austin-healey.webp' },
  { id: 90, name: 'Bluebird', brandLogoUrl: '/images/Brands/bluebird.webp' },
  { id: 34, name: 'BMW', brandLogoUrl: '/images/Brands/bmw.webp' },
  { id: 80, name: 'Brockway', brandLogoUrl: '/images/Brands/brockway.webp' },
  { id: 70, name: 'BSA', brandLogoUrl: '/images/Brands/bsa.webp' },
  { id: 18, name: 'Buick / Opel', brandLogoUrl: '/images/Brands/buick---opel.webp' },
  { id: 19, name: 'Cadillac', brandLogoUrl: '/images/Brands/cadillac.webp' },
  { id: 20, name: 'Chevrolet', brandLogoUrl: '/images/Brands/chevrolet.webp' },
  { id: 6, name: 'Chrysler', brandLogoUrl: '/images/Brands/chrysler.webp' },
  { id: 26, name: 'Coda', brandLogoUrl: '/images/Brands/coda.webp' },
  { id: 64, name: 'Daewoo', brandLogoUrl: '/images/Brands/daewoo.webp' },
  { id: 60, name: 'Daihatsu', brandLogoUrl: '/images/Brands/daihatsu.webp' },
  { id: 81, name: 'Diamond Reo/Reo', brandLogoUrl: '/images/Brands/diamond-reo---reo.webp' },
  { id: 7, name: 'Dodge', brandLogoUrl: '/images/Brands/dodge.webp' },
  { id: 71, name: 'Ducati', brandLogoUrl: '/images/Brands/ducati.webp' },
  { id: 10, name: 'Eagle', brandLogoUrl: '/images/Brands/eagle.webp' },
  { id: 91, name: 'Eagle Coach', brandLogoUrl: '/images/Brands/eagle-coach.webp' },
  { id: 36, name: 'Fiat', brandLogoUrl: '/images/Brands/fiat.webp' },
  { id: 12, name: 'Ford', brandLogoUrl: '/images/Brands/ford.webp' },
  { id: 82, name: 'Freightliner', brandLogoUrl: '/images/Brands/freightliner.webp' },
  { id: 83, name: 'FWD', brandLogoUrl: '/images/Brands/fwd.webp' },
  { id: 92, name: 'Gillig', brandLogoUrl: '/images/Brands/gillig.webp' },
  { id: 23, name: 'GMC', brandLogoUrl: '/images/Brands/gmc.webp' },
  { id: 25, name: 'Grumman', brandLogoUrl: '/images/Brands/grumman.webp' },
  { id: 72, name: 'Harley-Davidson', brandLogoUrl: '/images/Brands/harley-davidson.webp' },
  { id: 37, name: 'Honda', brandLogoUrl: '/images/Brands/honda.webp' },
  { id: 55, name: 'Hyundai', brandLogoUrl: '/images/Brands/hyundai.webp' },
  { id: 8, name: 'Imperial', brandLogoUrl: '/images/Brands/imperial.webp' },
  { id: 58, name: 'Infiniti', brandLogoUrl: '/images/Brands/infiniti.webp' },
  {
    id: 84,
    name: 'International Harvester/Navistar',
    brandLogoUrl: '/images/Brands/international-harvester-navistar.webp',
  },
  { id: 38, name: 'Isuzu', brandLogoUrl: '/images/Brands/isuzu.webp' },
  { id: 88, name: 'Iveco/Magirus', brandLogoUrl: '/images/Brands/iveco---magirus.webp' },
  { id: 39, name: 'Jaguar', brandLogoUrl: '/images/Brands/jaguar.webp' },
  {
    id: 2,
    name: 'Jeep / Kaiser-Jeep / Willys- Jeep',
    brandLogoUrl: '/images/Brands/jeep---kaiser-jeep---willys--jeep.webp',
  },
  { id: 73, name: 'Kawasaki', brandLogoUrl: '/images/Brands/kawasaki.webp' },
  { id: 85, name: 'Kenworth', brandLogoUrl: '/images/Brands/kenworth.webp' },
  { id: 63, name: 'KIA', brandLogoUrl: '/images/Brands/kia.webp' },
  { id: 40, name: 'Lancia', brandLogoUrl: '/images/Brands/lancia.webp' },
  { id: 62, name: 'Land Rover', brandLogoUrl: '/images/Brands/land-rover.webp' },
  { id: 59, name: 'Lexus', brandLogoUrl: '/images/Brands/lexus.webp' },
  { id: 13, name: 'Lincoln', brandLogoUrl: '/images/Brands/lincoln.webp' },
  { id: 86, name: 'Mack', brandLogoUrl: '/images/Brands/mack.webp' },
  { id: 41, name: 'Mazda', brandLogoUrl: '/images/Brands/mazda.webp' },
  { id: 93, name: 'MCI', brandLogoUrl: '/images/Brands/mci.webp' },
  { id: 42, name: 'Mercedes-Benz', brandLogoUrl: '/images/Brands/mercedes-benz.webp' },
  { id: 14, name: 'Mercury', brandLogoUrl: '/images/Brands/mercury.webp' },
  { id: 56, name: 'Merkur', brandLogoUrl: '/images/Brands/merkur.webp' },
  { id: 43, name: 'MG', brandLogoUrl: '/images/Brands/mg.webp' },
  { id: 52, name: 'Mitsubishi', brandLogoUrl: '/images/Brands/mitsubishi.webp' },
  { id: 74, name: 'Moto-Guzzi', brandLogoUrl: '/images/Brands/moto-guzzi.webp' },
  { id: 35, name: 'Nissan/Datsun', brandLogoUrl: '/images/Brands/nissan-datsun.webp' },
  { id: 75, name: 'Norton', brandLogoUrl: '/images/Brands/norton.webp' },
  { id: 21, name: 'Oldsmobile', brandLogoUrl: '/images/Brands/oldsmobile.webp' },
  { id: 87, name: 'Peterbilt', brandLogoUrl: '/images/Brands/peterbilt.webp' },
  { id: 44, name: 'Peugeot', brandLogoUrl: '/images/Brands/peugeot.webp' },
  { id: 9, name: 'Plymouth', brandLogoUrl: '/images/Brands/plymouth.webp' },
  { id: 22, name: 'Pontiac', brandLogoUrl: '/images/Brands/pontiac.webp' },
  { id: 45, name: 'Porsche', brandLogoUrl: '/images/Brands/porsche.webp' },
  { id: 46, name: 'Renault', brandLogoUrl: '/images/Brands/renault.webp' },
  { id: 47, name: 'Saab', brandLogoUrl: '/images/Brands/saab.webp' },
  { id: 24, name: 'Saturn', brandLogoUrl: '/images/Brands/saturn.webp' },
  { id: 67, name: 'Scion', brandLogoUrl: '/images/Brands/scion.webp' },
  { id: 65, name: 'Smart', brandLogoUrl: '/images/Brands/smart.webp' },
  { id: 48, name: 'Subaru', brandLogoUrl: '/images/Brands/subaru.webp' },
  { id: 53, name: 'Suzuki', brandLogoUrl: '/images/Brands/suzuki.webp' },
  { id: 49, name: 'Toyota', brandLogoUrl: '/images/Brands/toyota.webp' },
  { id: 50, name: 'Triumph', brandLogoUrl: '/images/Brands/triumph.webp' },
  { id: 30, name: 'Volkswagen', brandLogoUrl: '/images/Brands/volkswagen.webp' },
  { id: 51, name: 'Volvo', brandLogoUrl: '/images/Brands/volvo.webp' },
  { id: 76, name: 'Yamaha', brandLogoUrl: '/images/Brands/yamaha.webp' },
  { id: 57, name: 'Yugo', brandLogoUrl: '/images/Brands/yugo.webp' },
  { id: 98, name: 'Other Make', brandLogoUrl: '/images/Brands/other-make.webp' },
  { id: 99, name: 'Unknown Make', brandLogoUrl: '/images/Brands/unknown-make.webp' },
  {
    id: 29,
    name: 'Other Domestic Manufacturers',
    brandLogoUrl: '/images/Brands/other-domestic-manufacturers.webp',
  },
  { id: 69, name: 'Other Import', brandLogoUrl: '/images/Brands/other-import.webp' },
];

export const questions = [
  {
    text: "🧠 What is the main focus of this personal project?",
    options: [
      "Building a machine learning model for crash prediction",
      "Creating a web app to visualize car crash data",
      "Designing a mobile app for drivers",
      "Developing a video game about traffic",
    ],
    correctIndex: 1,
  },
  {
    text: "🧠 What architecture is used to retrieve and store data in this project?",
    options: [
      "Server-Side Rendering (SSR)",
      "Model-View-Controller (MVC)",
      "ETL (Extract, Transform, Load)",
      "CI/CD (Continuous Integration / Continuous Deployment)",
    ],
    correctIndex: 2,
  },
  {
    text: "🧠 What is the main goal of the B2B approach in this project?",
    options: [
      "Improve accident response time",
      "Identify dangerous states",
      "Recommend insurance to individuals",
      "Partner with car brands based on accident data",
    ],
    correctIndex: 3,
  },
  {
    text: "🧠 What is one core objective of this project?",
    options: [
      "Build a crash prediction AI",
      "Create interactive data visualizations",
      "Develop a car rental system",
      "Connect users with insurance agents",
    ],
    correctIndex: 1,
  },
  {
    text: "🧠 What does the ETL process do first?",
    options: [
      "Transform the data",
      "Load data into the database",
      "Extract CSV files from the API",
      "Send data to the frontend",
    ],
    correctIndex: 2,
  },
  {
    text: "🧠 What framework is used in the backend?",
    options: [
      "Express.js",
      "Django",
      "Spring Boot",
      "NestJS",
    ],
    correctIndex: 2,
  },
  {
    text: "🧠 Where is the ETL process deployed in the cloud setup?",
    options: [
      "Amazon EC2",
      "ECS Fargate",
      "Lambda Functions",
      "S3 Buckets",
    ],
    correctIndex: 1,
  },
  {
    text: "🧠 What tool is used as a load balancer in the on-premise setup?",
    options: [
      "Apache Server",
      "Nginx",
      "Kubernetes",
      "HAProxy",
    ],
    correctIndex: 2,
  },
  {
    text: "🧠 What method is used to manage user authentication in this project?",
    options: [
      "Username and password",
      "OAuth with Google",
      "Session-based JWT with email code",
      "Fingerprint login",
    ],
    correctIndex: 2,
  },
  {
    text: "🧠 What is one of the safest login methods used in secure applications today?",
    options: [
      "Single password login",
      "Two-factor authentication with time-based codes",
      "Email-only login",
      "Biometric scanning only",
    ],
    correctIndex: 1,
  }
];

export const dialogLines = [
    "Hi! Welcome to my personal project, and thank you for taking the time to check it out. My name is Fabricio, and in this presentation I’ll walk you through a web application focused on Car Crashes.\n\nThis project serves as a showcase of my technical skills, demonstrating how to build a modern web application using Next.js following best practices. It highlights proper code structure, efficient asynchronous operations, performance optimization for fast response times, and key principles of security (OAuth standards) and scalability.\n\nBelow, you'll find a question section — one question per slide. Feel free to answer them or not — they're designed to help you reflect on whether you're understanding each part of the presentation. At the end, you'll get a summary of how well you followed along.",
    "In this personal project, the goal is to read traffic accident data from a public U.S. government API using an ETL architecture. The data is then stored in a database and made accessible through a backend API that feeds the frontend application.\n\nThe government API provides public data, and my ETL process runs in real time, constantly reading and updating the information to keep everything up to date. As of today, the database contains ${TOTAL} records in total, which is why performance and response speed are crucial for delivering the data effectively to the frontend.",
    "For the B2B approach, this project focuses on identifying vehicle brands with the highest fatal accident rates over a defined range of years. The goal is to leverage these insights to strengthen strategic partnerships with those brands, aiming to increase customer loyalty and encourage the recommendation of our insurance services as a preferred provider.\n\nFor the B2C approach, the platform analyzes accident rates across U.S. states by year range to guide direct insurance sales efforts. This helps individuals make informed decisions when choosing the right coverage based on regional accident trends, ultimately improving protection in high-risk areas.",
    "Let's continue with the objective and requirements of this project.\n\nThe main goal is to visually represent fatal car accident data across the U.S. in a way that helps us define the right target audience — both from a business-to-business and a business-to-consumer perspective.\n\nTo achieve this, we first need to accurately read, understand, and store publicly available crash data provided by the U.S. government. From there, we generate focused insights — either by state for the B2C angle or by car brand and model for the B2B strategy.\n\nAll of this is brought together in a responsive web application that uses interactive graphs to communicate the data clearly.\n\nBeyond visualization, the project also demonstrates both on-premise and cloud-based infrastructure solutions, and finally, showcases how security techniques are applied to protect sensitive data and address potential vulnerabilities throughout the system.",
    "This slide shows the architecture used in this project.\n\nWe begin on the far right, with the ETL process. It starts by extracting CSV files from the Car Crashes API. Once the data is extracted, it's transformed — meaning we clean, reformat, and reshape it — and then it's loaded into a local SQLite database, which is embedded in the backend.\n\nThen, we move to the core of the backend, where we’ve built a REST API using Spring Boot, following a standard three-layer architecture: controllers, services, and repositories. This API is responsible for serving data to the frontend and for handling all the logic related to reading and storing information.\n\nFinally, on the left side of the diagram, we have the frontend built with Next.js. It serves as the user interface and also manages cookies for session handling. Additionally, the frontend acts as a proxy server — helping bridge communication between the client and the backend API securely and efficiently.",
    "This project is built using a modern full stack of technologies, carefully chosen to meet both frontend and backend requirements.\n\nOn the frontend, we used Next.js for server-side rendering and routing, combined with React to build interactive UIs. Tailwind CSS was used for styling with utility-first classes, while TypeScript adds type safety throughout the codebase. We also incorporated Shadcn UI for components, Framer Motion for animations, and Nivo for data visualizations.\n\nOn the backend, the application runs on Java with Spring Boot as the main framework to handle REST APIs and data operations. SQLite was selected as a lightweight yet efficient relational database engine. For authentication, JWT is implemented to enable secure, stateless sessions. Finally, the NHTSA Crash Viewer API from the U.S. government serves as the primary source of accident data for the ETL pipeline.",
    "In case there is enough budget, this is how the project would be deployed in the cloud using AWS services.\n\nThe ETL and the API would each be deployed on separate ECS Fargate instances. Both would be configured with multiple replicas to ensure high availability — if one instance fails, others are still running. Each service would also have its own load balancer to distribute incoming traffic evenly.\n\nThe database would be hosted on Amazon RDS, also configured with read replicas to handle large query loads and provide redundancy.\n\nThe frontend would be hosted using AWS Amplify, which integrates with CloudFront, a global CDN. This setup ensures that the site loads quickly from different parts of the world by caching content closer to the users.\n\nFinally, if we decide to run the ETL process on a scheduled basis instead of real-time, we could use Amazon EventBridge to trigger the ETL at fixed intervals — for example, once a day or every few hours.",
    "This slide shows an on-premise deployment option, for organizations that prefer to host everything locally within their internal infrastructure.\n\nThe idea here is to containerize both the frontend and backend using Docker. Each service would have its own set of replicas running in isolated containers, ensuring high availability and load distribution.\n\nKubernetes is placed at the center as a load balancer, efficiently routing traffic between frontend and backend instances depending on the system's current load and availability.\n\nIn addition to load balancing, Kubernetes can also integrate with an Active Directory service to handle authentication and authorization across the entire system. This allows the infrastructure to stay secure and compatible with enterprise-level identity management.\n\nOverall, this setup provides a scalable and reliable deployment strategy for teams who want to manage and operate their infrastructure entirely on-site.",
    "This slide explains the security methods implemented in the project. For authentication, the system uses a session-based JWT strategy. Instead of passwords, the user logs in by simply entering their email and validating it with a one-time code. In a real production environment, this would ideally be combined with credentials, and for high-security applications, a second layer of authentication is recommended — such as a time-based code that refreshes every minute on a trusted device.\n\nTwo-factor authentication is currently one of the most secure login methods. Additionally, for demonstration purposes, this project uses both access and refresh JWT tokens to handle not just authorization but authentication as well.\n\nThe flow works as follows: the user inputs their email on the login form. This request first goes through the Next.js server, which forwards it to our API. The backend then sends a six-digit code to the user’s email. Once the user enters the code in the frontend, it is sent back to the API for verification. If the code is correct, the user is authenticated and the server responds with both an accessToken and a refreshToken.\n\nThese tokens are stored securely in HTTP-only cookies managed by the Next.js server, which is essential for keeping server components in sync with authentication state. Whenever a server-side route requires secure data, a custom Next.js middleware checks for a valid access token. If the token has expired, the middleware attempts to use the refreshToken to get a new one. Access tokens expire every 10 minutes, and if the refreshToken has also expired, the user must log in again.\n\nFor client components, data is fetched using server actions, which forward the authentication cookies with each request. This access/refresh token strategy is widely used by secure applications — it is the approach used by Facebook and is also employed in several internal systems at American Express, where I’ve worked. Combined with two-factor authentication using time-based codes on trusted devices, it provides strong and modern protection that is also relatively simple to implement.",
    "This project was deployed using a real setup in AWS, taking advantage of the free trial credits. Everything is organized in a single monorepository that contains three main folders: one for the frontend, one for the backend API, and one for the ETL process. Alongside these, the SQLite database file is stored at the root level.\n\nAll components are deployed together on a single EC2 instance to minimize costs, as the entire deployment was done within the limits of the AWS free tier. Despite the limited budget, this setup still allows the project to function end-to-end and demonstrate a realistic and practical deployment pipeline.",
    "Thank you so much for taking the time to go through this presentation — I truly appreciate it.\n\nIf you’re interested, the full source code of this project is available on GitHub. And if you could take just a moment to check it out and leave any feedback, it would mean a lot.\n\nFeedback is one of the most powerful tools we have as developers to grow, improve, and write better code — so please, if you have any thoughts, suggestions, or ideas, don’t hesitate to share them with me. I’d be incredibly grateful.\n\nAlso if you want to dowload the code and test it yourself please kindly ask for dowload request to my personal email: fdipolito@correo.um.edu.uy, and i will allow you to.\n\nTHANK YOU VERY MUCH, for visiting this personal proyect. 😊"
  ];